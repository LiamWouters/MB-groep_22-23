Unexpected token of type 'INVALID_NUMBER' with content '05.0' at line 9 and column 12.

[
  {"key1": "hi"},
  {"key2" :"val2"},
  true,
  false,
  null,
  "null",
  false,
  {"key3": 05.0

Instead of a INVALID_NUMBER, the parser expected a: 

STRING, based on:
	value -> `STRING`
	element -> `value`
	member -> `STRING COLON element`
	members -> `member`
	object -> `CURLY_OPEN members CURLY_CLOSE`
	value -> `object`
	element -> `value`
	elements -> `element`
	elements -> `element COMMA elements`
	array -> `ARRAY_OPEN elements ARRAY_CLOSE`
	value -> `array`
	element -> `value`
	json -> `element`

NUMBER, based on:
	value -> `NUMBER`
	element -> `value`
	member -> `STRING COLON element`
	members -> `member`
	object -> `CURLY_OPEN members CURLY_CLOSE`
	value -> `object`
	element -> `value`
	elements -> `element`
	elements -> `element COMMA elements`
	array -> `ARRAY_OPEN elements ARRAY_CLOSE`
	value -> `array`
	element -> `value`
	json -> `element`

BOOLEAN, based on:
	value -> `BOOLEAN`
	element -> `value`
	member -> `STRING COLON element`
	members -> `member`
	object -> `CURLY_OPEN members CURLY_CLOSE`
	value -> `object`
	element -> `value`
	elements -> `element`
	elements -> `element COMMA elements`
	array -> `ARRAY_OPEN elements ARRAY_CLOSE`
	value -> `array`
	element -> `value`
	json -> `element`

NULL, based on:
	value -> `NULL`
	element -> `value`
	member -> `STRING COLON element`
	members -> `member`
	object -> `CURLY_OPEN members CURLY_CLOSE`
	value -> `object`
	element -> `value`
	elements -> `element`
	elements -> `element COMMA elements`
	array -> `ARRAY_OPEN elements ARRAY_CLOSE`
	value -> `array`
	element -> `value`
	json -> `element`

CURLY_OPEN, based on:
	object -> `CURLY_OPEN CURLY_CLOSE`
	value -> `object`
	element -> `value`
	member -> `STRING COLON element`
	members -> `member`
	object -> `CURLY_OPEN members CURLY_CLOSE`
	value -> `object`
	element -> `value`
	elements -> `element`
	elements -> `element COMMA elements`
	array -> `ARRAY_OPEN elements ARRAY_CLOSE`
	value -> `array`
	element -> `value`
	json -> `element`

ARRAY_OPEN, based on:
	array -> `ARRAY_OPEN ARRAY_CLOSE`
	value -> `array`
	element -> `value`
	member -> `STRING COLON element`
	members -> `member`
	object -> `CURLY_OPEN members CURLY_CLOSE`
	value -> `object`
	element -> `value`
	elements -> `element`
	elements -> `element COMMA elements`
	array -> `ARRAY_OPEN elements ARRAY_CLOSE`
	value -> `array`
	element -> `value`
	json -> `element`
